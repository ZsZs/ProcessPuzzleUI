/*Name: SmartDocumentDescription: Represents a document of a Panel. Reads it's own structure and content from xml files and constructs HTML based on them.Requires:Provides:    - SmartDocumentPart of: ProcessPuzzle Browser UI, Back-end agnostic, desktop like, highly configurable, browser font-end, based on MochaUI and MooTools. http://www.processpuzzle.comAuthors:     - Zsolt ZsuffaCopyright: (C) 2011 This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.*/var SmartDocument = new Class({   Implements : Options,      options : {      componentName : "SmartDocument",      descriptionSelector : "smartDocumentDefinition/description",      documentContentUri : "DocumentContent.xml",      documentDefinitionUri : "DocumentDefinition.xml",      nameSelector : "smartDocumentDefinition/name",      versionSelector : "smartDocumentDefinition/version",      widgetContainerId : "SmartDocument"   },      //Constructor   initialize : function( i18Resource, options ) {      this.setOptions( options );      this.containerElement;      this.description = null;      this.documentData;      this.documentDefinition;      this.name = null;      this.resources = null;      this.version = null;            this.determineContainerElement();      this.loadDocumentDefinition();      this.loadDocumentData();      this.instantiateDocumentResources();   },   //Public accesors and mutators   construct: function(){   },      destroy: function() {   },      unmarshall: function(){      this.unmarshallDocumentDefinition();      this.resources.unmarshall();   },      //Properties   getDescription: function() { return this.description; },   getDocumentData: function() { return this.documentData; },   getDocumentDefinition: function() { return this.documentDefinition; },   getContainerElement: function() { return this.containerElement; },   getName: function() { return this.name; },   getResources: function() { return this.resources; },   getVersion: function() { return this.version; },      //Protected, private helper methods   determineContainerElement: function(){      this.containerElement = $( this.options.widgetContainerId );   }.protect(),      loadDocumentData: function() {      this.documentData = new XmlResource( this.options.documentContentUri );   }.protect(),      loadDocumentDefinition: function() {      this.documentDefinition = new XmlResource( this.options.documentDefinitionUri );   }.protect(),      instantiateDocumentResources: function(){      this.resources = new DocumentResources( this.documentDefinition );   }.protect(),      unmarshallDocumentDefinition: function(){      this.description = this.documentDefinition.selectNodeText( this.options.descriptionSelector );      this.name = this.documentDefinition.selectNodeText( this.options.nameSelector );      this.version = this.documentDefinition.selectNodeText( this.options.versionSelector );   }.protect()   });