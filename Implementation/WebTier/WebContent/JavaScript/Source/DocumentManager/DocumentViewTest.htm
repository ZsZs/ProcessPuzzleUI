<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<title>DocumentView test page</title>
	<META http-equiv="Content-Type" content="text/html; charset=UTF-8">

	<!-- JavaScript Unit -->
	<link rel="stylesheet" type="text/css" href="../../../JavaScript/jsunit/jsUnitStyle.css">
	<script language="javascript" src="../../../JavaScript/JsUnit/app/jsUnitCore.js"></script>
	<!-- JavaScript Unit -->

	<script language="JavaScript" src="../CommonScripts/AssertUtil.js"></script>
	<script language="JavaScript" src="../CommonScripts/inheritFrom.js"></script>
	<script language="JavaScript" src="../CommonScripts/Collection.js"></script>
	<script language="JavaScript" src="../CommonScripts/CList.js"></script>
	<script language="JavaScript" src="../CommonScripts/CSimpleObservable.js"></script>
	<script language="JavaScript" src="DocumentEvents.js"></script>
	<script language="JavaScript" src="DocumentView.js"></script>
</head>

<body>
	<h1>DocumentView test page.</h1>

	<script language="javascript">
		var simpleDocumentView;
		
		function setUp() {
			documentView = new DocumentView("documentView", "Document View", "anUri");
		}

		function tearDown(){
			documentView = null;
		}

		function testConstructor(){
			assertFalse("New view is shouldnt be active.", documentView.isActive());
		}

		function testActivate_ForIsActive(){
			documentView.activate();
			assertTrue("Calling activate method make it active.", documentView.isActive());
		}

		function testDeActivate_ForIsActive(){
			documentView.activate();
			documentView.deActivate();
			assertFalse("Calling deActivate method make it unactive.", documentView.isActive());
		}

		function testActivate_ForCallBackEvent(){
			var observer = new Object();
			observer.observe = function (eventParameter) { this.documentEvent = eventParameter; }
			documentView.addObserver(observer);
			documentView.activate();

			assertTrue("The activate method signs the observer with 'ViewActivationEvent'.", observer.documentEvent instanceof ViewActivationEvent);
		}
		
		function testDeActivate_ForCallBackEvent(){
			var observer = new Object();
			observer.observe = function (eventParameter) { this.documentEvent = eventParameter; }
			documentView.addObserver(observer);
			documentView.activate();
			documentView.deActivate();

			assertTrue("The deactivate method signs the observer with 'ViewDeActivationEvent'.", observer.documentEvent instanceof ViewDeActivationEvent);
		}

		function testStaticUrl() {
			assertEquals("A new view has static url in default", "anUri", documentView.getContentUrl() );
		}
		
		function testDynamicUrl() {
			documentView.setToDynamic();
			documentView.setViewParameter("alma");
			assertEquals("Dynamic view has view parameter with value 'alma'.", "anUri&viewParam=alma", documentView.getContentUrl() );
		}

	
		//runs a test funcition during debugging
		function runTestFunction(){
			setUp();
			//testActivate_ForCallBackEvent();
			tearDown();
		}

		runTestFunction();

	</script>

</body>
</html>